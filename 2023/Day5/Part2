[LL_WEBREPORT_STARTSCRIPT NAME:loadData /]
// The various arrays are used only for debugging and display purposes.
function String loadData(Dynamic context)
 integer count = 0, entCount=0, sCount=0
 List seedList = {}, seedListI = {}
 List Mapper = {}
 integer dest, source, range
 for myItem in context.data
  if count == 0
   // First run, it's the seeds.
   seedList = Str.Elements(myItem.Column1[8:], ' ')
   for (sCount=1;sCount<=Length(seedList);sCount+=2)
    seedListI = { @seedListI, {Str.StringToInteger(seedList[sCount]), Str.StringToInteger(seedList[sCount])+Str.StringToInteger(seedList[sCount+1])-1 } }
   end
  elseif myItem.Column1[-1]==':'
   // It's a new map list.
   entCount+=1
   Mapper[entCount] = {}
  else
   // Given [1] is the dest, [2] is the source, [3] is the range from [2], therefore: [2] is startnum, [2]+[3]-1 is the endnum, [1]-[2] is the offset
   dest=Str.StringToInteger(Str.Elements(myItem.Column1, ' ')[1])
   source=Str.StringToInteger(Str.Elements(myItem.Column1, ' ')[2])
   range=Str.StringToInteger(Str.Elements(myItem.Column1, ' ')[3])
   Mapper[entCount] = { @Mapper[entCount], { source, source+range-1, dest-source } } // Loading the mappings.
  end
  count += 1
 end
 // Data is loaded. Now..... go through the map! Initial ranges will get split into subsequent ranges. Iterate.
 List curMap={} // Keeps it simple.
 String evo = ""
 for (count=1;count<=Length(Mapper);count+=1)
  entCount=1 // Now take each seed and check it through the list of maps.
  while entCount <= Length(seedListI)
   for (sCount=1;sCount<=Length(Mapper[count]);sCount+=1)
    curMap = Mapper[count][sCount] // Keep it simple. curMap is the start, end, offset.
    if curMap[1] <= seedListI[entCount][1] && curMap[2] >= seedListI[entCount][2]
     // Entire mapping encompasses the seed range. Remap and break.
     seedListI[entCount] = { seedListI[entCount][1]+curMap[3], seedListI[entCount][2]+curMap[3] }
     break;
    elseif curMap[1] <= seedListI[entCount][1] && curMap[2] >= seedListI[entCount][1] &&curMap[2] <= seedListI[entCount][2]
     // Target starts lower seed range, but ends before higher seed range. Split the first off, continue the run with the second. No break.
     seedListI = { @seedListI, { curMap[2]+1, seedListI[entCount][2] } }
     seedListI[entCount] = { seedListI[entCount][1]+curMap[3], curMap[2]+curMap[3] }
     break;
    elseif curMap[1] >= seedListI[entCount][1] && curMap[1] <= seedListI[entCount][2] && curMap[2] >= seedListI[entCount][2]
     // Target starts above seed range, and ends higher than seed range. Split the first off, map the second, then break.
     seedListI = { @seedListI, { seedListI[entCount][1], curMap[1]-1 } }
     seedListI[entCount] = { curMap[1]+curMap[3], seedListI[entCount][2]+curMap[3] }
     break;
    elseif curMap[1] >= seedListI[entCount][1] && curMap[2] <= seedListI[entCount][2]
     // Target starts above lower seed range, but ends before higher seed range. Split into three, continue the run with the third. No break.
     seedListI = { @seedListI, { seedListI[entCount][1], curMap[1]-1 }, { curMap[2]+1, seedListI[entCount][2] } }
     seedListI[entCount] = { curMap[1]+curMap[3], curMap[2]+curMap[3] }
     break;
    end
    // Starts higher or ends lower than the current seed, so this range is unchanged.
   end
   entCount += 1
  end
 end
 // Take the lowest!
 return Str.String(List.Sort(seedListI))
end
[LL_WEBREPORT_ENDSCRIPT /]

Output: [LL_WEBREPORT_CALL NAME:loadData /]
