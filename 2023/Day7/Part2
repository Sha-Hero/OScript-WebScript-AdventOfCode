[LL_WEBREPORT_STARTSCRIPT NAME:loadData /]
// The various arrays are used only for debugging and display purposes.
// The workaround for adding a key/value is create a new assoc, and then Assoc.Merge() the two.
// The workaround for retrieval is to use a stringified input (the "myAssoc" here): String output = ._subtag(Str.ValueToString(myAssoc),'ASSOC:'+ myKey)
// Assoc Values need to be stringified too.

function String loadData(Dynamic context)
 Assoc MyData = Assoc.CreateAssoc()
 List handList= {}
 String hand
 Integer curVal, hrank, jokers
 List numList = {0, 0, 0, 0, 0}
 List rankList = {{},{},{},{},{},{},{}}
 // OK, let's load the data and do the work.
 for myItem in context.data
  numList = {0, 0, 0, 0, 0}
  jokers=0
  MyData = Assoc.CreateAssoc()
  hand = Str.String(myItem.Column1)
  MyData.value = Str.String(myItem.Column2)
  for (count=1;count <=5;count+=1)
   switch hand[count]
    case 'A'; hand[count]='Z'; end
    case 'K'; hand[count]='Y'; end
    case 'Q'; hand[count]='X'; end
    case 'J'; hand[count]='-'; jokers+=1; end
    case 'T'; hand[count]='V'; end
   end
   if hand[count] != '-'
    if Assoc.IsKey( MyData, 'z'+Str.String(hand[count]))
     curVal = Str.StringToInteger(._subtag(Str.ValueToString(MyData),'ASSOC:z'+ Str.String(hand[count])))
     numList[curVal] -= 1
     numList[curVal+1] += 1
     MyData = Assoc.Merge( MyData, Assoc.CreateFromPairs( 'z'+Str.String(hand[count]), Str.String(curVal+1)))
    else
     numList[1] += 1
     MyData = Assoc.Merge( MyData, Assoc.CreateFromPairs( 'z'+Str.String(hand[count]), '1' ))
    end
   end
  end
  MyData.hand = hand
  if numList[5] == 1 || jokers==5 // five of a kind
   hrank=1
  elseif numList[4] == 1 // four of a kind, a single
   if jokers==1; hrank=1; else; hrank=2; end;
  elseif numList[3] == 1
   if numList[2] == 1 // full house
    hrank=3
   else // triple
    if jokers==1; hrank=2; elseif jokers==2; hrank=1; else; hrank=4; end;
   end
  elseif numList[2] ==2 // two pair
   if jokers==1; hrank=3; else; hrank=5; end;
  elseif numList[2] == 1 // one pair
   if jokers==1; hrank=4; elseif jokers==2; hrank=2; elseif jokers==3; hrank=1; else; hrank=6; end;
  else // high card
   if jokers==1; hrank=6; elseif jokers==2; hrank=4; elseif jokers==3; hrank=2; elseif jokers==4; hrank=1; else; hrank=7; end;
  end
  rankList[hrank] = List.Sort({ @rankList[hrank], { MyData.hand, MyData.value } })
 end
 // Sorted lists. Iterate and multiply.
 curVal=0
 hrank=1
 for (count=7;count>=1;count-=1)
  for (scount=1;scount<=Length(rankList[count]);scount+=1)
   curVal += hrank*Str.StringToInteger(rankList[count][scount][2])
   hrank += 1
  end
 end
 return Str.String(curVal)
end
[LL_WEBREPORT_ENDSCRIPT /]

Input splitting on space. Output:<BR>
[LL_WEBREPORT_CALL NAME:loadData /]
