[LL_WEBREPORT_STARTSCRIPT NAME:loadData /]
// The various arrays are used only for debugging and display purposes.
// The workaround for adding a key/value is create a new assoc, and then Assoc.Merge() the two.
// The workaround for retrieval is to use a stringified input (the "myAssoc" here): String output = ._subtag(Str.ValueToString(myAssoc),'ASSOC:'+ myKey)
// Assoc Values need to be stringified too.

function String loadData(Dynamic context)
 Assoc MyData = Assoc.CreateAssoc()
 Integer count = 0
 List inpElem = {}
 String path, cur=''
 // OK, let's load the data and do the work. OScript doesn't like the input format.
 MyData = Assoc.CreateAssoc()
 for myItem in context.data
  if count == 0
   // First run, it's the path.
   path = Str.String(myItem.Column1)
   count += 1
  else
   inpElem = Str.Elements(myItem.Column1, ' ')
   MyData = Assoc.Merge( MyData, Assoc.CreateFromPairs( inpElem[1]+'L', inpElem[3][2:-2], inpElem[1]+'R', inpElem[4][:-2]))
  end
 end
 cur = 'AAA'
 Integer neb=1
 while (1==1)
  for (count=1;count<=Length(path);count+=1)
   cur = ._subtag(Str.ValueToString(MyData),'ASSOC:'+cur+path[count])
  end
  if cur == 'ZZZ'
   break
  end
  neb += 1
 end
 return Str.String(neb*Length(path))
end
[LL_WEBREPORT_ENDSCRIPT /]

Input splitting on space. Output:<BR>
[LL_WEBREPORT_CALL NAME:loadData /]
