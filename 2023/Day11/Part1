[LL_WEBREPORT_STARTSCRIPT NAME:callIt /]
function String anyName(Dynamic context)
 List grid = {}, cx = {}, cy = {}, glxs = {}
 Integer count = 0, cnum, cnum2
 if isDefined (context.data) // check there is a data source
  for (count = 1; count <= Length(context.data); count += 1)
   cx = { @cx, count }
  end
  count = 0
  for myVal in context.data
   count += 1;
   grid = { @grid, myVal.Column1 }
   cnum2 = 0
   cnum = Str.Chr(myVal.Column1, '#' )
   if IsUndefined( cnum )
    cy = { @cy, count }
   else
    while IsDefined(cnum)
     cnum2 += cnum
     cx = List.SetRemove( cx, cnum2)
     cnum = Str.Locate( myVal.Column1[cnum2+1:], '#' )
    end
   end
  end
 end
 // Update the grid with the new insertions.
 for count in List.Sort(cx, List.Descending)
  for (cnum = 1; cnum <= Length(grid); cnum += 1)
   grid[cnum] = grid[cnum][:count]+'.'+grid[cnum][count+1:]
  end
 end
 for count in List.Sort(cy, List.Descending)
  grid = { @grid[:count], grid[count], @grid[count+1:] }
 end
 // Generate the list of galaxies. This could probably be done without creating the whole grids, but hey ho.
 for (count = 1; count <= Length(grid); count += 1)
  cnum2 = 0
  cnum = Str.Chr(grid[count], '#' )
  while IsDefined(cnum)
   cnum2 += cnum
   glxs = { @glxs, { cnum2, count } }
   cnum = Str.Locate( grid[count][cnum2+1:], '#' )
  end
 end
 // Now add 'em up!
 count = 0
 for (cnum = 1; cnum < Length(glxs); cnum += 1)
  for (cnum2 = cnum+1; cnum2 <= Length(glxs); cnum2 += 1)
   count += Math.Abs(glxs[cnum][1]-glxs[cnum2][1]) + Math.Abs(glxs[cnum][2]-glxs[cnum2][2])
  end
 end
 return Str.String(count)
end
[LL_WEBREPORT_ENDSCRIPT /]

Total:<BR>[LL_WEBREPORT_CALL NAME:callIt /]<BR>
