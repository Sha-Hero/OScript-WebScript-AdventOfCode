[LL_WEBREPORT_STARTSCRIPT NAME:parseInput /]
// This is the function that does the work.
function List anyName(String cardnum, String draws)
 cardnum = Str.Strip(cardnum, "'") // removing leading/trailing quotes.
 draws = Str.Strip(draws, "'") // removing leading/trailing quotes.
 // Just going to union the sides and see how much "shorter" the list is.
 List winnum = Str.Elements(draws, "|")
 List eachrow = { List.SetRemove(Str.Elements(winnum[1], ' '), ''), List.SetRemove(Str.Elements(winnum[2], ' '), '') }
 eachrow = { @eachrow, Str.ValueToString(Length(eachrow[1])+Length(eachrow[2])-Length(List.SetUnion(eachrow[1], eachrow[2]))) }
 return eachrow
end
[LL_WEBREPORT_ENDSCRIPT /]

[LL_WEBREPORT_STARTSCRIPT NAME:loadData /]
// The various arrays are used only for debugging and display purposes.
function String loadData(Dynamic context)
 integer count = 0
 integer sum = 0, points
 string retArray=""
 List funcRet = {}
 // OK, let's load the data and do the work.
 for myItem in context.data
  funcRet = .parseInput(Str.ValueToString(myItem.Column1), Str.ValueToString(myItem.Column2))
  points = Math.Power(2,Str.StringToInteger(funcRet[3])-1)
  if points < 1; points = 0; end;
  retArray = retArray+",[["+Str.String(funcRet[1])[2:-2]+"]"+",["+Str.String(funcRet[2])[2:-2]+"]"+",["+Str.String(funcRet[3])+"]"+",["+Str.String(points)+"]]"
  count+=1
  sum += points
 end
 // Trim the leading comma and package it up.
 retArray = "["+retArray[2:]+"]"
 // Add the sum to the return data. This is what we're looking for.
 retArray = "[["+Str.ValueToString(count)+","+Str.ValueToString(sum)+"],"+retArray+"]"
 return retArray
end
[LL_WEBREPORT_ENDSCRIPT /]

<script>
$( document ).ready(function() {
 [/* One call. Loads the data and makes the call. We cannot assign script results to a variable for manipulation in WebReports.
 Regardless in the spirit of the challenge, everything needs to be done in the OScript functions. */]
 const myReturn = [LL_WEBREPORT_CALL NAME:loadData /];
 [/* And... we're done. Just parse out the data and display. */]
 $('#sumTable tr:last').after("<TR><TD>"+myReturn[0][0]+"</TD><TD>"+myReturn[0][1]+"</TD></TR>");
 for (eachLine of myReturn[1]) {
   $('#dataTable tr:last').after("<TR><TD>"+eachLine[0]+"</TD><TD>"+eachLine[1]+"</TD><TD>"+eachLine[2]+"</TD><TD>"+eachLine[3]+"</TD></TR>");
 }
});
</script>

<TABLE id="sumTable" BORDER=1 ><TR><TH>NumEntries</TH><TH>SUM</TH></TR>
</TABLE>
<TABLE id="dataTable" BORDER=1 ><TR><TH>Card#</TH><TH>Winning</TH><TH>Mine</TH><TH>Wins</TH></TR>
</TABLE>
