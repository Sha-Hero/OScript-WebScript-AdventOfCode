[LL_WEBREPORT_STARTSCRIPT NAME:parseInput /]
// This is the function that does the work.
function string anyName(String incoming)
 return incoming
end
[LL_WEBREPORT_ENDSCRIPT /]

[LL_WEBREPORT_STARTSCRIPT NAME:loadData /]
// The various arrays are used only for debugging and display purposes.
function String loadData(Dynamic context)
 List funcRet = {}
 integer count = 0, entCount=0, sCount=0
 integer lseed=-1, lcount=-1
 List seedList = {}
 List Mapper = {}
 List seedPath = {}
 integer dest, source, range
 for myItem in context.data
  if count == 0
   // First run, it's the seeds.
   seedList = Str.Elements(myItem.Column1[8:], ' ')
  elseif myItem.Column1[-1]==':'
   // It's a new map list.
   entCount+=1
   Mapper[entCount] = {}
  else
   // It's a list of data. Dest range, src range, offest.
   // Given [1] is the dest, [2] is the source, [3] is the range from [2], therefore: [2] is startnum, [2]+[3]-1 is the endnum, [1]-[2] is the offset
   dest=Str.StringToInteger(Str.Elements(myItem.Column1, ' ')[1]); source=Str.StringToInteger(Str.Elements(myItem.Column1, ' ')[2]); range=Str.StringToInteger(Str.Elements(myItem.Column1, ' ')[3])
   Mapper[entCount] = { @Mapper[entCount], { source, source+range-1, dest-source } }
  end
  count += 1
 end
 // funcRest will hold the sorted lists for each stage [x] is the stage number, [x][y] are the lists of mappings
 for (count=1;count<=Length(Mapper);count+=1)
  funcRet[count]=List.Sort(Mapper[count])
 end
 // Data is loaded. Now..... go through the map!
 // for each entry in seedlist, go until number is either in a range (in which case we offest), or if source is too high then no offset.
for (seedNum=1;seedNum<=Length(seedList);seedNum+=1)
 tgt = Str.StringToInteger(seedList[seedNum])
 if seedNum==1;lseed=tgt;end
 seedPath[seedNum] = {}
 for (count=1;count<=Length(funcRet)+1;count+=1)
  seedPath[seedNum] = { @seedPath[seedNum], tgt }
  for (sCount=1;sCount<=Length(funcRet[count]);sCount+=1)
   if funcRet[count][sCount][1] > tgt
    // Stop here.
    break;
   elseif funcRet[count][sCount][2] >= tgt
    // We know startnum is <= seed. If endnum >= then in range, and we add the offset.
    tgt = tgt+funcRet[count][sCount][3]
    break;
   else
    // If we're here, it's because  we need to keep iterating. Don't need to do anything.
   end
  end
 end
 if lcount==-1
  lcount=tgt
 elseif tgt <= lcount
  lcount=tgt
  lseed=Str.StringToInteger(seedList[seedNum])
 end
end
string noutput = Str.Format('Low seed = %1 with count = %2<BR>', lseed, lcount)
 // Let it iterate through all the permutations.
 for (count=1;count<=Length(seedPath);count+=1)
  noutput = noutput+'Seed #'+Str.String(count)+': '+Str.String(seedPath[count])+'<BR>'
 end
 return noutput
end
[LL_WEBREPORT_ENDSCRIPT /]

Output: [LL_WEBREPORT_CALL NAME:loadData /]
